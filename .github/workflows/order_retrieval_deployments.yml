name: Deploy Order Retrieval Lambda

on:
  push:
    branches:
      - main
    paths:
      - "terraform/states/environments/aws/my-aws-account/eu-west-1/dev-ireland-1/lambda/order-retrieval/**"
      - "terraform/modules/lambda/**"
      - ".github/workflows/order_retrieval_deployments.yml"

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy Order Retrieval
    runs-on: ubuntu-latest
    environment: dev

    env:
      AWS_REGION: "eu-west-1"
      ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      TERRAGRUNT_WORKING_DIR: "${{ github.workspace }}/terraform/states/environments/aws/my-aws-account/eu-west-1/dev-ireland-1/lambda/order-retrieval"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/aidoc-devops2-ex-github-oidc-auth
          aws-region: ${{ env.AWS_REGION }}

      - name: Assume `github-actions-workflows` Role Securely
        id: assume-role
        run: |
          CREDENTIALS=$(aws sts assume-role \
            --role-arn "arn:aws:iam::${{ env.ACCOUNT_ID }}:role/aidoc-devops2-ex-github-actions-workflows" \
            --role-session-name "GitHubActionsSession")

          # Masking Secrets in Logs
          echo "::add-mask::$(echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId')"
          echo "::add-mask::$(echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey')"
          echo "::add-mask::$(echo $CREDENTIALS | jq -r '.Credentials.SessionToken')"

          # Export Variables Securely
          echo "AWS_ACCESS_KEY_ID=$(echo $CREDENTIALS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDENTIALS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDENTIALS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV
      
      - name: Test
        run: |
          echo "TERRAGRUNT_WORKING_DIR: ${{ env.TERRAGRUNT_WORKING_DIR }}"
          env

      - name: Install Terragrunt
        run: |
          curl -LO https://github.com/gruntwork-io/terragrunt/releases/latest/download/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
          terragrunt --version

      - name: Validate Terraform Configuration
        working-directory: ${{ env.TERRAGRUNT_WORKING_DIR }}
        run: |
          echo "Running Terragrunt plan for validation..."
          terragrunt run-all plan --terragrunt-non-interactive
        continue-on-error: false

      - name: Deploy Order Retrieval Lambda with Terragrunt
        working-directory: ${{ env.TERRAGRUNT_WORKING_DIR }}
        run: |
          terragrunt run-all apply --auto-approve
